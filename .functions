#!/bin/bash

# Always list directory contents upon 'cd'
cd() { builtin cd "$@"; ll; }

# mcd: Makes new Dir and jumps inside
mcd () { mkdir -p "$1" && cd "$1"; }

# trash: Moves a file to the MacOS trash
trash () { command mv "$@" ~/.Trash ; }

# ql: Opens any file in MacOS Quicklook Preview
ql () { qlmanage -p "$*" >& /dev/null; }

# cleands: Recursively delete .DS_Store files
cleands () {find . -type f -name '*.DS_Store' -ls -delete}

# To create a ZIP archive of a folder
zipf () { zip -r "$1".zip "$1" ; }

# 'Cd's to frontmost window of MacOS Finder
cdf () {
    currFolderPath=$( /usr/bin/osascript <<EOT
        tell application "Finder"
            try
        set currFolder to (folder of the front window as alias)
            on error
        set currFolder to (path to desktop folder as alias)
            end try
            POSIX path of currFolder
        end tell
EOT
    )
    echo "cd to \"$currFolderPath\""
    cd "$currFolderPath"
}

# Search for a file using MacOS Spotlight's metadata
spotlight () { mdfind "kMDItemDisplayName == '$@'wc"; }

# Useful information
ii() {
    echo -e "\nYou are logged on ${RED}$HOST"
    echo -e "\nAdditionnal information:$NC " ; uname -a
    echo -e "\n${RED}Users logged on:$NC " ; w -h
    echo -e "\n${RED}Current date :$NC " ; date
    echo -e "\n${RED}Machine stats :$NC " ; uptime
    echo -e "\n${RED}Current network location :$NC " ; scselect
    echo -e "\n${RED}Public facing IP Address :$NC " ;myip
    #echo -e "\n${RED}DNS Configuration:$NC " ; scutil --dns
    echo
}


# Global updater
function up () {
	# Password for Sudo
	echo -e "\033[0;36mPlease provide local password (may auto-skip)...\033[0m"
	sudo -v

	# Mac Updates
	sudo softwareupdate -i -a

    # Composer
    if [ -e "/usr/local/bin/composer" ] ; then
		composerupdate
    fi

    # Homebrew
    if [ -e "/usr/local/bin/brew" ] || [ -e "/opt/homebrew/bin/brew" ]  ; then
		brew update
		brew upgrade
		brew cask upgrade
		brew cleanup
		brew doctor
		brew missing
    fi

    # NPM
    if [ -e "/usr/local/bin/npm" ]  || [ -e "/opt/homebrew/bin/npm" ] ; then
		npm install npm -g
		npm update -g
    fi

    # Ruby Gems
    if [ -e "/usr/bin/gem" ] || [ -e "~/.rbenv/shims/gem" ] ; then
		sudo gem update --system
		sudo gem update -n /usr/local/bin
		sudo gem cleanup
    fi

    # Python
    if [[ $(command -v pip) == "" ]]; then
        pip install --upgrade "pip" "setuptools"
    fi

    # Rust
    if [[ $(command -v rustup) == "" ]]; then
        rustup update
    fi

    # Ruby
    if [[ $(command -v gem) == "" ]]; then
        gem update --system
    fi

    # UpdateDB
    if [[ $(command -v updatedb) == "" ]]; then
        updatedb 2> /dev/null || true
    fi
}

# Normalize `open` across Linux, macOS, and Windows.
# This is needed to make the `o` function (see below) cross-platform.
if [ ! $(uname -s) = 'Darwin' ]; then
    if grep -q Microsoft /proc/version; then
        # Ubuntu on Windows using the Linux subsystem
        alias open='explorer.exe';
    else
        alias open='xdg-open';
    fi
fi

# Create a data URL from a file
dataurl() {
    local mimeType
    mimeType=$(file -b --mime-type "$1")
    if [[ $mimeType == text/* ]]; then
        mimeType="${mimeType};charset=utf-8"
    fi
    echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')"
}

# Call from a local repo to open the repository on github/bitbucket in browser
# Modified version of https://github.com/zeke/ghwd
repo() {
    # Figure out github repo base URL
    local base_url
    base_url=$(git config --get remote.origin.url)
    base_url=${base_url%\.git} # remove .git from end of string

    # Fix git@github.com: URLs
    base_url=${base_url//git@github\.com:/https:\/\/github\.com\/}

    # Fix git://github.com URLS
    base_url=${base_url//git:\/\/github\.com/https:\/\/github\.com\/}

    # Fix git@bitbucket.org: URLs
    base_url=${base_url//git@bitbucket.org:/https:\/\/bitbucket\.org\/}

    # Fix git@gitlab.com: URLs
    base_url=${base_url//git@gitlab\.com:/https:\/\/gitlab\.com\/}

    # Validate that this folder is a git folder
    if ! git branch 2>/dev/null 1>&2 ; then
        echo "Not a git repo!"
        exit $?
    fi

    # Find current directory relative to .git parent
    full_path=$(pwd)
    git_base_path=$(cd "./$(git rev-parse --show-cdup)" || exit 1; pwd)
    relative_path=${full_path#$git_base_path} # remove leading git_base_path from working directory

    # If filename argument is present, append it
    if [ "$1" ]; then
        relative_path="$relative_path/$1"
    fi

    # Figure out current git branch
    # git_where=$(command git symbolic-ref -q HEAD || command git name-rev --name-only --no-undefined --always HEAD) 2>/dev/null
    git_where=$(command git name-rev --name-only --no-undefined --always HEAD) 2>/dev/null

    # Remove cruft from branchname
    branch=${git_where#refs\/heads\/}
    branch=${branch#remotes\/origin\/}

    [[ $base_url == *bitbucket* ]] && tree="src" || tree="tree"
    url="$base_url/$tree/$branch$relative_path"


    echo "Calling $(type open) for $url"

    open "$url" &> /dev/null || (echo "Using $(type open) to open URL failed." && exit 1);
}

# Run diagnostics on all available package managers and development tools
function doctor() {
    echo -e "\nüè• Starting system diagnostics...\n"

    # Track issues
    declare -a found_issues=()

    # Homebrew
    if command -v brew &> /dev/null; then
        echo "üç∫ Running Homebrew diagnostics..."
        if ! brew doctor; then
            found_issues+=("Homebrew")
        fi
        if ! brew missing; then
            found_issues+=("Homebrew missing dependencies")
        fi
    fi

    # Ruby environment
    if command -v rbenv &> /dev/null; then
        echo "üíé Checking Ruby environment..."
        if ! curl -fsSL https://github.com/rbenv/rbenv-installer/raw/main/bin/rbenv-doctor | bash; then
            found_issues+=("Ruby/rbenv")
        fi
    fi

    # Node environment
    if command -v npm &> /dev/null; then
        echo "üì¶ Checking NPM..."
        if ! npm doctor; then
            found_issues+=("NPM")
        fi
    fi

    # Yarn
    if command -v yarn &> /dev/null; then
        echo "üß∂ Checking Yarn..."
        if ! yarn doctor; then
            found_issues+=("Yarn")
        fi
    fi

    # PNPM
    if command -v pnpm &> /dev/null; then
        echo "üì¶ Checking PNPM..."
        if ! pnpm doctor; then
            found_issues+=("PNPM")
        fi
    fi

    # Python environment
    if command -v pip &> /dev/null; then
        echo "üêç Checking pip..."
        if ! pip check; then
            found_issues+=("Python pip dependencies")
        fi
    fi

    # Flutter
    if command -v flutter &> /dev/null; then
        echo "üì± Checking Flutter..."
        if ! flutter doctor; then
            found_issues+=("Flutter")
        fi
    fi

    # Git
    if command -v git &> /dev/null; then
        echo "üåø Checking Git configuration..."
        if ! git fsck; then
            found_issues+=("Git repository integrity")
        fi
    fi

    # Docker
    if command -v docker &> /dev/null; then
        echo "üê≥ Checking Docker..."
        if ! docker info > /dev/null 2>&1; then
            found_issues+=("Docker")
        fi
    fi

    # Composer
    if command -v composer &> /dev/null; then
        echo "üéº Checking Composer..."
        if ! composer diagnose; then
            found_issues+=("Composer")
        fi
    fi

    # System integrity (macOS only)
    if [ "$(uname)" == "Darwin" ]; then
        echo "üçé Checking macOS system integrity..."
        if ! system_profiler SPSoftwareDataType > /dev/null; then
            found_issues+=("macOS System")
        fi

        echo "üîç Verifying system integrity..."
        if ! sudo verify_system > /dev/null 2>&1; then
            found_issues+=("macOS System Integrity")
        fi
    fi

    # Disk health (macOS only)
    if [ "$(uname)" == "Darwin" ]; then
        echo "üíΩ Checking disk health..."
        if ! diskutil verifyVolume / > /dev/null 2>&1; then
            found_issues+=("Disk health")
        fi
    fi

    # Network diagnostics
    echo "üåê Checking network connectivity..."
    if ! ping -c 1 8.8.8.8 > /dev/null 2>&1; then
        found_issues+=("Network connectivity")
    fi

    # DNS resolution
    if ! nslookup github.com > /dev/null 2>&1; then
        found_issues+=("DNS resolution")
    fi

    # Final report
    echo -e "\nüìã Diagnostic Summary:"
    if [ ${#found_issues[@]} -eq 0 ]; then
        echo -e "\n‚úÖ All systems are running normally!\n"
    else
        echo -e "\n‚ö†Ô∏è  Issues were found in the following systems:"
        printf '%s\n' "${found_issues[@]}"
        echo -e "\nPlease review the output above for detailed information about each issue.\n"
    fi

    # Suggestions for fixes
    if [ ${#found_issues[@]} -gt 0 ]; then
        echo "üîß Suggested fixes:"
        echo "1. For Homebrew issues: 'brew doctor'"
        echo "2. For Ruby issues: 'rbenv doctor'"
        echo "3. For Node issues: 'npm doctor'"
        echo "4. For Flutter issues: 'flutter doctor'"
        echo "5. For disk issues: 'diskutil repairVolume /'"
        echo "6. For package manager issues: Try running 'up' to update all packages"
        echo -e "\n"
    fi
}
