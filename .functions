#!/bin/bash

# Always list directory contents upon 'cd'
cd() { builtin cd "$@"; ll; }

# mcd: Makes new Dir and jumps inside
mcd () { mkdir -p "$1" && cd "$1"; }

# trash: Moves a file to the MacOS trash
trash () { command mv "$@" ~/.Trash ; }

# ql: Opens any file in MacOS Quicklook Preview
ql () { qlmanage -p "$*" >& /dev/null; }

# cleands: Recursively delete .DS_Store files
cleands () {find . -type f -name '*.DS_Store' -ls -delete}

# To create a ZIP archive of a folder
zipf () { zip -r "$1".zip "$1" ; }

# 'Cd's to frontmost window of MacOS Finder
cdf () {
    currFolderPath=$( /usr/bin/osascript <<EOT
        tell application "Finder"
            try
        set currFolder to (folder of the front window as alias)
            on error
        set currFolder to (path to desktop folder as alias)
            end try
            POSIX path of currFolder
        end tell
EOT
    )
    echo "cd to \"$currFolderPath\""
    cd "$currFolderPath"
}

# Search for a file using MacOS Spotlight's metadata
spotlight () { mdfind "kMDItemDisplayName == '$@'wc"; }

# Useful information
ii() {
    echo -e "\nYou are logged on ${RED}$HOST"
    echo -e "\nAdditionnal information:$NC " ; uname -a
    echo -e "\n${RED}Users logged on:$NC " ; w -h
    echo -e "\n${RED}Current date :$NC " ; date
    echo -e "\n${RED}Machine stats :$NC " ; uptime
    echo -e "\n${RED}Current network location :$NC " ; scselect
    echo -e "\n${RED}Public facing IP Address :$NC " ;myip
    #echo -e "\n${RED}DNS Configuration:$NC " ; scutil --dns
    echo
}


# Global updater
function up () {
	# Password for Sudo
	echo -e "\033[0;36mPlease provide local password (may auto-skip)...\033[0m"
	sudo -v

	# Mac Updates
	sudo softwareupdate -i -a

    # Composer
    if [ -e "/usr/local/bin/composer" ] ; then
		composerupdate
    fi

    # Homebrew
    if [ -e "/usr/local/bin/brew" ] || [ -e "/opt/homebrew/bin/brew" ]  ; then
		brew update
		brew upgrade
		brew cask upgrade
		brew cleanup
		brew doctor
		brew missing
    fi

    # NPM
    if [ -e "/usr/local/bin/npm" ]  || [ -e "/opt/homebrew/bin/npm" ] ; then
		npm install npm -g
		npm update -g
    fi

    # Ruby Gems
    if [ -e "/usr/bin/gem" ] || [ -e "~/.rbenv/shims/gem" ] ; then
		sudo gem update --system
		sudo gem update -n /usr/local/bin
		sudo gem cleanup
    fi

    # Python
    if [[ $(command -v pip) == "" ]]; then
        pip install --upgrade "pip" "setuptools"
    fi

    # Rust
    if [[ $(command -v rustup) == "" ]]; then
        rustup update
    fi

    # Ruby
    if [[ $(command -v gem) == "" ]]; then
        gem update --system
    fi

    # UpdateDB
    if [[ $(command -v updatedb) == "" ]]; then
        updatedb 2> /dev/null || true
    fi
}

# Normalize `open` across Linux, macOS, and Windows.
# This is needed to make the `o` function (see below) cross-platform.
if [ ! $(uname -s) = 'Darwin' ]; then
    if grep -q Microsoft /proc/version; then
        # Ubuntu on Windows using the Linux subsystem
        alias open='explorer.exe';
    else
        alias open='xdg-open';
    fi
fi

# Create a data URL from a file
dataurl() {
    local mimeType
    mimeType=$(file -b --mime-type "$1")
    if [[ $mimeType == text/* ]]; then
        mimeType="${mimeType};charset=utf-8"
    fi
    echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')"
}

# Call from a local repo to open the repository on github/bitbucket in browser
# Modified version of https://github.com/zeke/ghwd
repo() {
    # Figure out github repo base URL
    local base_url
    base_url=$(git config --get remote.origin.url)
    base_url=${base_url%\.git} # remove .git from end of string

    # Fix git@github.com: URLs
    base_url=${base_url//git@github\.com:/https:\/\/github\.com\/}

    # Fix git://github.com URLS
    base_url=${base_url//git:\/\/github\.com/https:\/\/github\.com\/}

    # Fix git@bitbucket.org: URLs
    base_url=${base_url//git@bitbucket.org:/https:\/\/bitbucket\.org\/}

    # Fix git@gitlab.com: URLs
    base_url=${base_url//git@gitlab\.com:/https:\/\/gitlab\.com\/}

    # Validate that this folder is a git folder
    if ! git branch 2>/dev/null 1>&2 ; then
        echo "Not a git repo!"
        exit $?
    fi

    # Find current directory relative to .git parent
    full_path=$(pwd)
    git_base_path=$(cd "./$(git rev-parse --show-cdup)" || exit 1; pwd)
    relative_path=${full_path#$git_base_path} # remove leading git_base_path from working directory

    # If filename argument is present, append it
    if [ "$1" ]; then
        relative_path="$relative_path/$1"
    fi

    # Figure out current git branch
    # git_where=$(command git symbolic-ref -q HEAD || command git name-rev --name-only --no-undefined --always HEAD) 2>/dev/null
    git_where=$(command git name-rev --name-only --no-undefined --always HEAD) 2>/dev/null

    # Remove cruft from branchname
    branch=${git_where#refs\/heads\/}
    branch=${branch#remotes\/origin\/}

    [[ $base_url == *bitbucket* ]] && tree="src" || tree="tree"
    url="$base_url/$tree/$branch$relative_path"


    echo "Calling $(type open) for $url"

    open "$url" &> /dev/null || (echo "Using $(type open) to open URL failed." && exit 1);
}
